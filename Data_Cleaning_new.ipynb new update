{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xkaycc/SALES-PREDICTION/blob/main/Data_Cleaning_new.ipynb%20new%20update\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4670551b",
      "metadata": {
        "id": "4670551b"
      },
      "source": [
        "# Data Cleaning"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "id": "5e7427fb",
      "metadata": {
        "id": "5e7427fb"
      },
      "outputs": [],
      "source": [
        "import numpy as np \n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "id": "777315df",
      "metadata": {
        "id": "777315df",
        "outputId": "e7420c51-9617-46b8-be27-5541269cdf6e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
              "0           FDA15         9.30          Low Fat         0.016047   \n",
              "1           DRC01         5.92          Regular         0.019278   \n",
              "2           FDN15        17.50          Low Fat         0.016760   \n",
              "3           FDX07        19.20          Regular         0.000000   \n",
              "4           NCD19         8.93          Low Fat         0.000000   \n",
              "\n",
              "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
              "0                  Dairy  249.8092            OUT049   \n",
              "1            Soft Drinks   48.2692            OUT018   \n",
              "2                   Meat  141.6180            OUT049   \n",
              "3  Fruits and Vegetables  182.0950            OUT010   \n",
              "4              Household   53.8614            OUT013   \n",
              "\n",
              "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
              "0                       1999      Medium               Tier 1   \n",
              "1                       2009      Medium               Tier 3   \n",
              "2                       1999      Medium               Tier 1   \n",
              "3                       1998         NaN               Tier 3   \n",
              "4                       1987        High               Tier 3   \n",
              "\n",
              "         Outlet_Type  Item_Outlet_Sales  \n",
              "0  Supermarket Type1          3735.1380  \n",
              "1  Supermarket Type2           443.4228  \n",
              "2  Supermarket Type1          2097.2700  \n",
              "3      Grocery Store           732.3800  \n",
              "4  Supermarket Type1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d7ecc181-1934-4cba-a3ee-c0c5faf5af44\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7ecc181-1934-4cba-a3ee-c0c5faf5af44')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d7ecc181-1934-4cba-a3ee-c0c5faf5af44 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d7ecc181-1934-4cba-a3ee-c0c5faf5af44');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ],
      "source": [
        "# load data\n",
        "df = pd.read_csv('sales_predictions (4).csv')\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "id": "02eef214",
      "metadata": {
        "id": "02eef214",
        "outputId": "e0434700-2735-44ae-b140-1f169d7675d7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8523 entries, 0 to 8522\n",
            "Data columns (total 12 columns):\n",
            " #   Column                     Non-Null Count  Dtype  \n",
            "---  ------                     --------------  -----  \n",
            " 0   Item_Identifier            8523 non-null   object \n",
            " 1   Item_Weight                7060 non-null   float64\n",
            " 2   Item_Fat_Content           8523 non-null   object \n",
            " 3   Item_Visibility            8523 non-null   float64\n",
            " 4   Item_Type                  8523 non-null   object \n",
            " 5   Item_MRP                   8523 non-null   float64\n",
            " 6   Outlet_Identifier          8523 non-null   object \n",
            " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
            " 8   Outlet_Size                6113 non-null   object \n",
            " 9   Outlet_Location_Type       8523 non-null   object \n",
            " 10  Outlet_Type                8523 non-null   object \n",
            " 11  Item_Outlet_Sales          8523 non-null   float64\n",
            "dtypes: float64(4), int64(1), object(7)\n",
            "memory usage: 799.2+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cd79090f",
      "metadata": {
        "id": "cd79090f"
      },
      "source": [
        "How many rows and columns?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "id": "b53b134d",
      "metadata": {
        "id": "b53b134d",
        "outputId": "be2e9646-cf38-4727-c003-c9a88ab2da8f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8523, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3027e1ab",
      "metadata": {
        "id": "3027e1ab"
      },
      "source": [
        "What are the datatypes of each variable?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "id": "a7f40e0e",
      "metadata": {
        "id": "a7f40e0e",
        "outputId": "1d4b3ad9-faad-4665-f3a8-aaf19d84334e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Identifier               object\n",
              "Item_Weight                  float64\n",
              "Item_Fat_Content              object\n",
              "Item_Visibility              float64\n",
              "Item_Type                     object\n",
              "Item_MRP                     float64\n",
              "Outlet_Identifier             object\n",
              "Outlet_Establishment_Year      int64\n",
              "Outlet_Size                   object\n",
              "Outlet_Location_Type          object\n",
              "Outlet_Type                   object\n",
              "Item_Outlet_Sales            float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5d3c3f2e",
      "metadata": {
        "id": "5d3c3f2e"
      },
      "source": [
        "Are there duplicates? If so, drop any duplicates"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "id": "271d7970",
      "metadata": {
        "id": "271d7970",
        "outputId": "312cfb61-1c0b-4340-8f43-771f34749f6f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Item_Identifier, Item_Weight, Item_Fat_Content, Item_Visibility, Item_Type, Item_MRP, Outlet_Identifier, Outlet_Establishment_Year, Outlet_Size, Outlet_Location_Type, Outlet_Type, Item_Outlet_Sales]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f6f6293d-f147-4b2c-8b33-af5ed3ec66b8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6f6293d-f147-4b2c-8b33-af5ed3ec66b8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f6f6293d-f147-4b2c-8b33-af5ed3ec66b8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f6f6293d-f147-4b2c-8b33-af5ed3ec66b8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "# There are no duplicate rows.\n",
        "duplicates = df[df.duplicated()]\n",
        "duplicates"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7534b1af",
      "metadata": {
        "id": "7534b1af"
      },
      "source": [
        "Identify missing values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "id": "cbbea448",
      "metadata": {
        "id": "cbbea448",
        "outputId": "c2a1715e-430e-433b-da6e-23698979eddc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Identifier              False\n",
              "Item_Weight                   True\n",
              "Item_Fat_Content             False\n",
              "Item_Visibility              False\n",
              "Item_Type                    False\n",
              "Item_MRP                     False\n",
              "Outlet_Identifier            False\n",
              "Outlet_Establishment_Year    False\n",
              "Outlet_Size                   True\n",
              "Outlet_Location_Type         False\n",
              "Outlet_Type                  False\n",
              "Item_Outlet_Sales            False\n",
              "dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ],
      "source": [
        "df.isna().any()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ba6ac50d",
      "metadata": {
        "id": "ba6ac50d"
      },
      "source": [
        "Decide on how to address the missing values and do it!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "id": "fa759c95",
      "metadata": {
        "id": "fa759c95"
      },
      "outputs": [],
      "source": [
        "# I will replace missing value in items_weight column with the mean, since it is a column with numrical value\n",
        "mean = df['Item_Weight'].mean()\n",
        "df['Item_Weight'].fillna(mean, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "id": "f63f49cc",
      "metadata": {
        "id": "f63f49cc",
        "outputId": "8d30c18d-bee4-4de8-a9c1-11e6fe62b5cf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8523 entries, 0 to 8522\n",
            "Data columns (total 12 columns):\n",
            " #   Column                     Non-Null Count  Dtype  \n",
            "---  ------                     --------------  -----  \n",
            " 0   Item_Identifier            8523 non-null   object \n",
            " 1   Item_Weight                8523 non-null   float64\n",
            " 2   Item_Fat_Content           8523 non-null   object \n",
            " 3   Item_Visibility            8523 non-null   float64\n",
            " 4   Item_Type                  8523 non-null   object \n",
            " 5   Item_MRP                   8523 non-null   float64\n",
            " 6   Outlet_Identifier          8523 non-null   object \n",
            " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
            " 8   Outlet_Size                6113 non-null   object \n",
            " 9   Outlet_Location_Type       8523 non-null   object \n",
            " 10  Outlet_Type                8523 non-null   object \n",
            " 11  Item_Outlet_Sales          8523 non-null   float64\n",
            "dtypes: float64(4), int64(1), object(7)\n",
            "memory usage: 799.2+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "id": "96095a77",
      "metadata": {
        "id": "96095a77"
      },
      "outputs": [],
      "source": [
        "# There are 2410 missing value for outlet_size column, dropping them will result to much loss of our data. \n",
        "# We will use ffil method to replace missing value\n",
        "df['Outlet_Size'].fillna(method='ffill', inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a95148f9",
      "metadata": {
        "id": "a95148f9"
      },
      "source": [
        "Confirm that there are no missing values after addressing them."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "id": "5ce505cf",
      "metadata": {
        "id": "5ce505cf",
        "outputId": "766bb42f-07b2-4cb5-d690-06872033abad",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Identifier              False\n",
              "Item_Weight                  False\n",
              "Item_Fat_Content             False\n",
              "Item_Visibility              False\n",
              "Item_Type                    False\n",
              "Item_MRP                     False\n",
              "Outlet_Identifier            False\n",
              "Outlet_Establishment_Year    False\n",
              "Outlet_Size                  False\n",
              "Outlet_Location_Type         False\n",
              "Outlet_Type                  False\n",
              "Item_Outlet_Sales            False\n",
              "dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "df.isna().any()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5cbb69f0",
      "metadata": {
        "id": "5cbb69f0"
      },
      "source": [
        "Find and fix any inconsistent categories of data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "id": "89fe90bd",
      "metadata": {
        "id": "89fe90bd",
        "outputId": "75c9c8c4-9300-4783-ef97-1540cc52bf05",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
              "0           FDA15         9.30          Low Fat         0.016047   \n",
              "1           DRC01         5.92          Regular         0.019278   \n",
              "2           FDN15        17.50          Low Fat         0.016760   \n",
              "3           FDX07        19.20          Regular         0.000000   \n",
              "4           NCD19         8.93          Low Fat         0.000000   \n",
              "\n",
              "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
              "0                  Dairy  249.8092            OUT049   \n",
              "1            Soft Drinks   48.2692            OUT018   \n",
              "2                   Meat  141.6180            OUT049   \n",
              "3  Fruits and Vegetables  182.0950            OUT010   \n",
              "4              Household   53.8614            OUT013   \n",
              "\n",
              "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
              "0                       1999      Medium               Tier 1   \n",
              "1                       2009      Medium               Tier 3   \n",
              "2                       1999      Medium               Tier 1   \n",
              "3                       1998      Medium               Tier 3   \n",
              "4                       1987        High               Tier 3   \n",
              "\n",
              "         Outlet_Type  Item_Outlet_Sales  \n",
              "0  Supermarket Type1          3735.1380  \n",
              "1  Supermarket Type2           443.4228  \n",
              "2  Supermarket Type1          2097.2700  \n",
              "3      Grocery Store           732.3800  \n",
              "4  Supermarket Type1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0e1fa260-bfde-48c3-a4d1-70edcbea8d3b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e1fa260-bfde-48c3-a4d1-70edcbea8d3b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0e1fa260-bfde-48c3-a4d1-70edcbea8d3b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0e1fa260-bfde-48c3-a4d1-70edcbea8d3b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "id": "7c0dda7c",
      "metadata": {
        "id": "7c0dda7c",
        "outputId": "6f508221-e4c1-4a9a-fe0c-94022e50fd0d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Identifier              1559\n",
              "Item_Weight                   416\n",
              "Item_Fat_Content                5\n",
              "Item_Visibility              7880\n",
              "Item_Type                      16\n",
              "Item_MRP                     5938\n",
              "Outlet_Identifier              10\n",
              "Outlet_Establishment_Year       9\n",
              "Outlet_Size                     3\n",
              "Outlet_Location_Type            3\n",
              "Outlet_Type                     4\n",
              "Item_Outlet_Sales            3493\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ],
      "source": [
        "df.nunique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "id": "8da6a4b8",
      "metadata": {
        "id": "8da6a4b8",
        "outputId": "deedf6ec-344a-4783-bcd5-e2016e0cd646",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Dairy', 'Soft Drinks', 'Meat', 'Fruits and Vegetables',\n",
              "       'Household', 'Baking Goods', 'Snack Foods', 'Frozen Foods',\n",
              "       'Breakfast', 'Health and Hygiene', 'Hard Drinks', 'Canned',\n",
              "       'Breads', 'Starchy Foods', 'Others', 'Seafood'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ],
      "source": [
        "#No inconsistent category\n",
        "df['Item_Type'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "id": "c00f7247",
      "metadata": {
        "id": "c00f7247",
        "outputId": "f6a3aa96-3237-4c42-9f89-acc20c8d625d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Medium', 'High', 'Small'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ],
      "source": [
        "#no inconsistent category\n",
        "df['Outlet_Size'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "id": "ea31b787",
      "metadata": {
        "id": "ea31b787",
        "outputId": "401266ab-90d7-4eaa-d91d-5ba9dbe67157",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Low Fat', 'Regular', 'low fat', 'LF', 'reg'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ],
      "source": [
        "# inconsistent category exist in Item_Fat_Content column\n",
        "df['Item_Fat_Content'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "id": "d850b3f7",
      "metadata": {
        "id": "d850b3f7",
        "outputId": "59449b7c-4dda-46b5-b2f5-dce95cf570b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0c9b24cfa0>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "df['Item_Fat_Content'].hist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "id": "e1d9b32d",
      "metadata": {
        "id": "e1d9b32d"
      },
      "outputs": [],
      "source": [
        "# fix inconsistent category\n",
        "df['Item_Fat_Content'] = df['Item_Fat_Content'].replace(['low fat', 'LF', 'reg'], ['Low Fat', 'Low Fat', 'Regular'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c6eec1ac",
      "metadata": {
        "id": "c6eec1ac",
        "outputId": "9f9447f6-c3fb-4972-abca-d896ae825aac",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Low Fat', 'Regular'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "df['Item_Fat_Content'].unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c2d270c3",
      "metadata": {
        "id": "c2d270c3"
      },
      "source": [
        " For any numerical columns, obtain the summary statistics of each."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "67223336",
      "metadata": {
        "id": "67223336",
        "outputId": "9ec04b49-a144-4628-8ec7-c8b3c1eed095",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Item_Weight  Item_Visibility     Item_MRP  Outlet_Establishment_Year  \\\n",
              "count  8523.000000      8523.000000  8523.000000                8523.000000   \n",
              "mean     12.857645         0.066132   140.992782                1997.831867   \n",
              "std       4.226124         0.051598    62.275067                   8.371760   \n",
              "min       4.555000         0.000000    31.290000                1985.000000   \n",
              "25%       9.310000         0.026989    93.826500                1987.000000   \n",
              "50%      12.857645         0.053931   143.012800                1999.000000   \n",
              "75%      16.000000         0.094585   185.643700                2004.000000   \n",
              "max      21.350000         0.328391   266.888400                2009.000000   \n",
              "\n",
              "       Item_Outlet_Sales  \n",
              "count        8523.000000  \n",
              "mean         2181.288914  \n",
              "std          1706.499616  \n",
              "min            33.290000  \n",
              "25%           834.247400  \n",
              "50%          1794.331000  \n",
              "75%          3101.296400  \n",
              "max         13086.964800  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4b0d208f-e746-492f-a6a7-7e9dbbd599f4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8523.000000</td>\n",
              "      <td>8523.000000</td>\n",
              "      <td>8523.000000</td>\n",
              "      <td>8523.000000</td>\n",
              "      <td>8523.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.857645</td>\n",
              "      <td>0.066132</td>\n",
              "      <td>140.992782</td>\n",
              "      <td>1997.831867</td>\n",
              "      <td>2181.288914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.226124</td>\n",
              "      <td>0.051598</td>\n",
              "      <td>62.275067</td>\n",
              "      <td>8.371760</td>\n",
              "      <td>1706.499616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>4.555000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.290000</td>\n",
              "      <td>1985.000000</td>\n",
              "      <td>33.290000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>9.310000</td>\n",
              "      <td>0.026989</td>\n",
              "      <td>93.826500</td>\n",
              "      <td>1987.000000</td>\n",
              "      <td>834.247400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>12.857645</td>\n",
              "      <td>0.053931</td>\n",
              "      <td>143.012800</td>\n",
              "      <td>1999.000000</td>\n",
              "      <td>1794.331000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>16.000000</td>\n",
              "      <td>0.094585</td>\n",
              "      <td>185.643700</td>\n",
              "      <td>2004.000000</td>\n",
              "      <td>3101.296400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>21.350000</td>\n",
              "      <td>0.328391</td>\n",
              "      <td>266.888400</td>\n",
              "      <td>2009.000000</td>\n",
              "      <td>13086.964800</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b0d208f-e746-492f-a6a7-7e9dbbd599f4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4b0d208f-e746-492f-a6a7-7e9dbbd599f4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4b0d208f-e746-492f-a6a7-7e9dbbd599f4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "89c30a8d",
      "metadata": {
        "id": "89c30a8d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "outputId": "3167486b-05b2-4eb4-9f06-c87804ee1b3b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
              "0           FDA15         9.30          Low Fat         0.016047   \n",
              "1           DRC01         5.92          Regular         0.019278   \n",
              "2           FDN15        17.50          Low Fat         0.016760   \n",
              "3           FDX07        19.20          Regular         0.000000   \n",
              "4           NCD19         8.93          Low Fat         0.000000   \n",
              "\n",
              "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
              "0                  Dairy  249.8092            OUT049   \n",
              "1            Soft Drinks   48.2692            OUT018   \n",
              "2                   Meat  141.6180            OUT049   \n",
              "3  Fruits and Vegetables  182.0950            OUT010   \n",
              "4              Household   53.8614            OUT013   \n",
              "\n",
              "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
              "0                       1999      Medium               Tier 1   \n",
              "1                       2009      Medium               Tier 3   \n",
              "2                       1999      Medium               Tier 1   \n",
              "3                       1998      Medium               Tier 3   \n",
              "4                       1987        High               Tier 3   \n",
              "\n",
              "         Outlet_Type  Item_Outlet_Sales  \n",
              "0  Supermarket Type1          3735.1380  \n",
              "1  Supermarket Type2           443.4228  \n",
              "2  Supermarket Type1          2097.2700  \n",
              "3      Grocery Store           732.3800  \n",
              "4  Supermarket Type1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c770846d-3ec4-4c68-9c33-dffe66d13179\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c770846d-3ec4-4c68-9c33-dffe66d13179')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c770846d-3ec4-4c68-9c33-dffe66d13179 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c770846d-3ec4-4c68-9c33-dffe66d13179');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "PD6QsOQzdX4f",
        "outputId": "35635749-d918-4c80-a142-d25dd6b1275f"
      },
      "id": "PD6QsOQzdX4f",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
              "0           FDA15         9.30          Low Fat         0.016047   \n",
              "1           DRC01         5.92          Regular         0.019278   \n",
              "2           FDN15        17.50          Low Fat         0.016760   \n",
              "3           FDX07        19.20          Regular         0.000000   \n",
              "4           NCD19         8.93          Low Fat         0.000000   \n",
              "\n",
              "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
              "0                  Dairy  249.8092            OUT049   \n",
              "1            Soft Drinks   48.2692            OUT018   \n",
              "2                   Meat  141.6180            OUT049   \n",
              "3  Fruits and Vegetables  182.0950            OUT010   \n",
              "4              Household   53.8614            OUT013   \n",
              "\n",
              "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
              "0                       1999      Medium               Tier 1   \n",
              "1                       2009      Medium               Tier 3   \n",
              "2                       1999      Medium               Tier 1   \n",
              "3                       1998      Medium               Tier 3   \n",
              "4                       1987        High               Tier 3   \n",
              "\n",
              "         Outlet_Type  Item_Outlet_Sales  \n",
              "0  Supermarket Type1          3735.1380  \n",
              "1  Supermarket Type2           443.4228  \n",
              "2  Supermarket Type1          2097.2700  \n",
              "3      Grocery Store           732.3800  \n",
              "4  Supermarket Type1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3d24aa1-f455-4f34-b65d-c567bf7859b9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3d24aa1-f455-4f34-b65d-c567bf7859b9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a3d24aa1-f455-4f34-b65d-c567bf7859b9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a3d24aa1-f455-4f34-b65d-c567bf7859b9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Histogram of different column of our dataset\n",
        "df.hist(figsize=(10,10)) \n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "35VpozBtdAkv",
        "outputId": "edcd6d1f-eeae-4e34-c402-a7f0f88dc819"
      },
      "id": "35VpozBtdAkv",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 6 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.style.use(['dark_background','seaborn-muted', 'seaborn-poster'])"
      ],
      "metadata": {
        "id": "qbrve-LNeiS4"
      },
      "id": "qbrve-LNeiS4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data = df, x = 'Item_Weight')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        },
        "id": "j7O5E67telxi",
        "outputId": "0f77e503-05b7-4847-8868-4b8e73ec2eb6"
      },
      "id": "j7O5E67telxi",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 921.6x633.6 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(data = df, x = 'Item_Weight')\n",
        "plt.title('Boxplot of Item Weight')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "eTXOXFkLgjc4",
        "outputId": "481f9025-d9dc-4140-de99-a5a5250e5e32"
      },
      "id": "eTXOXFkLgjc4",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 921.6x633.6 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df.corr()\n",
        "corr"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "BxCEt9mYgwCc",
        "outputId": "1d559aaf-2d36-4916-9f00-85510ae3a54d"
      },
      "id": "BxCEt9mYgwCc",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Item_Weight  Item_Visibility  Item_MRP  \\\n",
              "Item_Weight                   1.000000        -0.012049  0.024756   \n",
              "Item_Visibility              -0.012049         1.000000 -0.001315   \n",
              "Item_MRP                      0.024756        -0.001315  1.000000   \n",
              "Outlet_Establishment_Year    -0.008301        -0.074834  0.005020   \n",
              "Item_Outlet_Sales             0.011550        -0.128625  0.567574   \n",
              "\n",
              "                           Outlet_Establishment_Year  Item_Outlet_Sales  \n",
              "Item_Weight                                -0.008301           0.011550  \n",
              "Item_Visibility                            -0.074834          -0.128625  \n",
              "Item_MRP                                    0.005020           0.567574  \n",
              "Outlet_Establishment_Year                   1.000000          -0.049135  \n",
              "Item_Outlet_Sales                          -0.049135           1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46c4bf90-4d30-4401-a6f2-e1018c835a78\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Item_Weight</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.012049</td>\n",
              "      <td>0.024756</td>\n",
              "      <td>-0.008301</td>\n",
              "      <td>0.011550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Visibility</th>\n",
              "      <td>-0.012049</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.001315</td>\n",
              "      <td>-0.074834</td>\n",
              "      <td>-0.128625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_MRP</th>\n",
              "      <td>0.024756</td>\n",
              "      <td>-0.001315</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.005020</td>\n",
              "      <td>0.567574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <td>-0.008301</td>\n",
              "      <td>-0.074834</td>\n",
              "      <td>0.005020</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.049135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "      <td>0.011550</td>\n",
              "      <td>-0.128625</td>\n",
              "      <td>0.567574</td>\n",
              "      <td>-0.049135</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46c4bf90-4d30-4401-a6f2-e1018c835a78')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-46c4bf90-4d30-4401-a6f2-e1018c835a78 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-46c4bf90-4d30-4401-a6f2-e1018c835a78');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(corr, cmap='tab20')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 762
        },
        "id": "as_RT8ERqvfe",
        "outputId": "65cde8f0-1500-4d0e-b963-1ae6a037e730"
      },
      "id": "as_RT8ERqvfe",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd36fa8df40>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 921.6x633.6 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "h3FCIUlj-Pkp",
        "outputId": "301a786a-7871-4601-8d34-729ff6ac02ff"
      },
      "id": "h3FCIUlj-Pkp",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
              "0           FDA15         9.30          Low Fat         0.016047   \n",
              "1           DRC01         5.92          Regular         0.019278   \n",
              "2           FDN15        17.50          Low Fat         0.016760   \n",
              "3           FDX07        19.20          Regular         0.000000   \n",
              "4           NCD19         8.93          Low Fat         0.000000   \n",
              "\n",
              "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
              "0                  Dairy  249.8092            OUT049   \n",
              "1            Soft Drinks   48.2692            OUT018   \n",
              "2                   Meat  141.6180            OUT049   \n",
              "3  Fruits and Vegetables  182.0950            OUT010   \n",
              "4              Household   53.8614            OUT013   \n",
              "\n",
              "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
              "0                       1999      Medium               Tier 1   \n",
              "1                       2009      Medium               Tier 3   \n",
              "2                       1999      Medium               Tier 1   \n",
              "3                       1998         NaN               Tier 3   \n",
              "4                       1987        High               Tier 3   \n",
              "\n",
              "         Outlet_Type  Item_Outlet_Sales  \n",
              "0  Supermarket Type1          3735.1380  \n",
              "1  Supermarket Type2           443.4228  \n",
              "2  Supermarket Type1          2097.2700  \n",
              "3      Grocery Store           732.3800  \n",
              "4  Supermarket Type1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aa63fb99-ac3f-4ed2-ba5f-42b35bdce4ed\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa63fb99-ac3f-4ed2-ba5f-42b35bdce4ed')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-aa63fb99-ac3f-4ed2-ba5f-42b35bdce4ed button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-aa63fb99-ac3f-4ed2-ba5f-42b35bdce4ed');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oUt_CPSA_gp1",
        "outputId": "04309fa1-4f99-4f2a-aabd-047bcaf10e26"
      },
      "id": "oUt_CPSA_gp1",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8523 entries, 0 to 8522\n",
            "Data columns (total 12 columns):\n",
            " #   Column                     Non-Null Count  Dtype  \n",
            "---  ------                     --------------  -----  \n",
            " 0   Item_Identifier            8523 non-null   object \n",
            " 1   Item_Weight                7060 non-null   float64\n",
            " 2   Item_Fat_Content           8523 non-null   object \n",
            " 3   Item_Visibility            8523 non-null   float64\n",
            " 4   Item_Type                  8523 non-null   object \n",
            " 5   Item_MRP                   8523 non-null   float64\n",
            " 6   Outlet_Identifier          8523 non-null   object \n",
            " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
            " 8   Outlet_Size                6113 non-null   object \n",
            " 9   Outlet_Location_Type       8523 non-null   object \n",
            " 10  Outlet_Type                8523 non-null   object \n",
            " 11  Item_Outlet_Sales          8523 non-null   float64\n",
            "dtypes: float64(4), int64(1), object(7)\n",
            "memory usage: 799.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make outlet_Establishment_Year date time\n",
        "pd.to_datetime(df['Outlet_Establishment_Year'], format='%Y')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5TfTgTL6_txG",
        "outputId": "a7c88c9f-37a0-4379-ad3f-82529b09f0ef"
      },
      "id": "5TfTgTL6_txG",
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      1999-01-01\n",
              "1      2009-01-01\n",
              "2      1999-01-01\n",
              "3      1998-01-01\n",
              "4      1987-01-01\n",
              "          ...    \n",
              "8518   1987-01-01\n",
              "8519   2002-01-01\n",
              "8520   2004-01-01\n",
              "8521   2009-01-01\n",
              "8522   1997-01-01\n",
              "Name: Outlet_Establishment_Year, Length: 8523, dtype: datetime64[ns]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "N40NoDAxBBOY",
        "outputId": "4ac31906-9e18-46b6-afec-63ad729b26c5"
      },
      "id": "N40NoDAxBBOY",
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
              "0           FDA15         9.30          Low Fat         0.016047   \n",
              "1           DRC01         5.92          Regular         0.019278   \n",
              "2           FDN15        17.50          Low Fat         0.016760   \n",
              "3           FDX07        19.20          Regular         0.000000   \n",
              "4           NCD19         8.93          Low Fat         0.000000   \n",
              "\n",
              "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
              "0                  Dairy  249.8092            OUT049   \n",
              "1            Soft Drinks   48.2692            OUT018   \n",
              "2                   Meat  141.6180            OUT049   \n",
              "3  Fruits and Vegetables  182.0950            OUT010   \n",
              "4              Household   53.8614            OUT013   \n",
              "\n",
              "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
              "0                       1999      Medium               Tier 1   \n",
              "1                       2009      Medium               Tier 3   \n",
              "2                       1999      Medium               Tier 1   \n",
              "3                       1998         NaN               Tier 3   \n",
              "4                       1987        High               Tier 3   \n",
              "\n",
              "         Outlet_Type  Item_Outlet_Sales  \n",
              "0  Supermarket Type1          3735.1380  \n",
              "1  Supermarket Type2           443.4228  \n",
              "2  Supermarket Type1          2097.2700  \n",
              "3      Grocery Store           732.3800  \n",
              "4  Supermarket Type1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c6e33324-a735-41e2-bbc8-709bd1b21b97\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6e33324-a735-41e2-bbc8-709bd1b21b97')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c6e33324-a735-41e2-bbc8-709bd1b21b97 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c6e33324-a735-41e2-bbc8-709bd1b21b97');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Item_Type.unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XGE-Z8frBBfL",
        "outputId": "7056da34-6fe5-4573-8f57-53a0ef7e025c"
      },
      "id": "XGE-Z8frBBfL",
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Dairy', 'Soft Drinks', 'Meat', 'Fruits and Vegetables',\n",
              "       'Household', 'Baking Goods', 'Snack Foods', 'Frozen Foods',\n",
              "       'Breakfast', 'Health and Hygiene', 'Hard Drinks', 'Canned',\n",
              "       'Breads', 'Starchy Foods', 'Others', 'Seafood'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w0IRq78_ARLm",
        "outputId": "3e0fc66f-589e-4998-8f8c-d371096e0f77"
      },
      "id": "w0IRq78_ARLm",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8523 entries, 0 to 8522\n",
            "Data columns (total 12 columns):\n",
            " #   Column                     Non-Null Count  Dtype         \n",
            "---  ------                     --------------  -----         \n",
            " 0   Item_Identifier            8523 non-null   object        \n",
            " 1   Item_Weight                7060 non-null   float64       \n",
            " 2   Item_Fat_Content           8523 non-null   object        \n",
            " 3   Item_Visibility            8523 non-null   float64       \n",
            " 4   Item_Type                  8523 non-null   object        \n",
            " 5   Item_MRP                   8523 non-null   float64       \n",
            " 6   Outlet_Identifier          8523 non-null   object        \n",
            " 7   Outlet_Establishment_Year  8523 non-null   datetime64[ns]\n",
            " 8   Outlet_Size                6113 non-null   object        \n",
            " 9   Outlet_Location_Type       8523 non-null   object        \n",
            " 10  Outlet_Type                8523 non-null   object        \n",
            " 11  Item_Outlet_Sales          8523 non-null   float64       \n",
            "dtypes: datetime64[ns](1), float64(4), object(7)\n",
            "memory usage: 799.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# recent years\n",
        "df_recent= df[df['Outlet_Establishment_Year'] > 2000]"
      ],
      "metadata": {
        "id": "jUm2ucpcC28z"
      },
      "id": "jUm2ucpcC28z",
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# older years\n",
        "df_old= df[df['Outlet_Establishment_Year'] < 2000]"
      ],
      "metadata": {
        "id": "Z_qIXl33F8py"
      },
      "id": "Z_qIXl33F8py",
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_recent['Outlet_Establishment_Year'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M8AxMbBRD5jS",
        "outputId": "5b3fd8d4-383a-40bd-f422-bcb9c5a9f5fb"
      },
      "id": "M8AxMbBRD5jS",
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2009, 2002, 2007, 2004])"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.lineplot(x= 'Outlet_Establishment_Year', y= 'Item_Outlet_Sales',data= df_recent)\n",
        "plt.title('Item outlet sales in recent years')\n",
        "plt.show();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "vwkWGlYtDpyx",
        "outputId": "f9687333-c1d2-4fa3-b4a7-ed8888ae8515"
      },
      "id": "vwkWGlYtDpyx",
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.lineplot(x= 'Outlet_Establishment_Year', y= 'Item_Outlet_Sales',data= df_old)\n",
        "plt.title('Item outlet sales before year 2000')\n",
        "plt.show();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "KxYpPEwxFxOx",
        "outputId": "6b9c74bd-99f4-4734-b10d-1d3227326245"
      },
      "id": "KxYpPEwxFxOx",
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pointplot(x='Outlet_Size', y='Item_Outlet_Sales', data=df, hue='Item_Fat_Content', dodge=True)\n",
        "plt.title('Relationship between Outlet Size and Item Sales')\n",
        "plt.show();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "6_UPl5mYG0GL",
        "outputId": "97cb264d-4045-4cb8-8a2a-93297cf72b53"
      },
      "id": "6_UPl5mYG0GL",
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.9"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}